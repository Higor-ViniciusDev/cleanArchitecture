package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"

	"github.com/Higor-ViniciusDev/CleanArchiteture/internal/infra/graph/model"
	"github.com/Higor-ViniciusDev/CleanArchiteture/internal/usecase"
)

// CriarOrdem is the resolver for the criarOrdem field.
func (r *mutationResolver) CriarOrdem(ctx context.Context, input model.NovaOrdem) (*model.Ordem, error) {
	dtoInput := usecase.OrdemInputDTO{
		ID:    input.ID,
		Preco: input.Preco,
		Taxa:  input.Taxa,
	}

	ordem, err := r.UseCaseOrder.Execute(dtoInput)
	if err != nil {
		return nil, fmt.Errorf("failed to create ordem: %w", err)
	}

	return &model.Ordem{
		ID:    ordem.ID,
		Preco: ordem.Preco,
		Taxa:  ordem.Taxa,
		Valor: ordem.Valor,
	}, nil
}

// ListOrders is the resolver for the ListOrders field.
func (r *queryResolver) ListOrders(ctx context.Context) ([]*model.Ordem, error) {
	ordens, err := r.ListCaseOrder.Execute()

	if err != nil {
		return nil, fmt.Errorf("Falha ao listar todas ações: %w", err)
	}

	var result []*model.Ordem
	for _, ordem := range ordens {
		result = append(result, &model.Ordem{
			ID:    ordem.ID,
			Preco: ordem.Preco,
			Taxa:  ordem.Taxa,
			Valor: ordem.Valor,
		})
	}

	return result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
